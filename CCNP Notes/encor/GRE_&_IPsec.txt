Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-09-13T08:03:46+09:00

====== GRE & IPsec ======
Created Wednesday 13 September 2023

For IPsec we have two options:
1. Crypto maps (legacy)
2. IPsec profiles (modern)

--------------------

====== Crypto Maps ======

isakmp policy
	defines how stuff will be encrypted globally
isakmp key
	defines what key will be used with what destination/peer
ipsec transfom-set
	deifnes a pair (called a transform set) of hash (integrity) and encryption
crypto map
	defines
		1. peer
		2. diffie helmann group
		3. security association lifetime
		4. what transform set to use
		5. what ACL to allow use of the crypto map
applying the crypto map

1. policy
2. key
3. acl
4. crypto map
5. apply to interface

--------------------

====== IPsec Profiles ======

you have to already be using a tunnel!!!

you can't create an IPsec tunnel on its own using profiles because it is applied on the interface
	if you apply the profile on the interface, it will encrypt traffic on that interface

1. policy
2. key
3. profile
4. tunnel protection ipsec profile <profile name>

--------------------

Fragmenting

Normal Ethernet MTU is 1500
{{.\pasted_image.png}}
Path MTU discovery (PMTUD) ipv4
1. R1 sends 1500 byte packet with DF bit destined for R3
2. R2 realizes that its too big
3. R2 unicasts icmpv4 'destination unreachable: too big' to R1
4. R1 fragements and sends it
5. If one of the fragments is still too big, the process will happen over and over again until it is small enough size

IPv6 routers will never fragment packets themselves, but instead will tell the original sender to fragment the packet 
--------------------

===== GRE =====

Recursive routing - when the best way to get to the tunnel destination is through the tunnel interface
1. I configure a tunnel with the source g1/0 and destination 201.69.57.1 (internet facing interface on Router B)
2. Router B activates 201.69.57.1 for OSPF
3. Router B sends Type 1 LSA
4. Router A examines Type 1 LSA
5. Router A's OSPF process sees that it can elect a new prefix into the RIB
	a. 201.69.57.1 over Tunnel0
6. Router A's OSPF process installs the interface into the RIB
7. Router A sends OSPF hellos over the tunnel (or really any other traffic tries to flow over the tunnel)
8. It cant because the best way (longest prefix) to get to 201.69.57.1 is through Tunnel0, and to get through Tunnel0 you need a good way to get to 201.69.57.1

The solution is to not learn the 201.69.57.1 prefix
1. Use different OSPF areas so you can filter it the route to 201.69.57.1 out
2. Use a distribute-list to not install the route into the local RIB
3. Use EIGRP and filter the route on the way out 
4. If you really want to enable all interfaces but you dont care if it comes in as a Type 3 LSA, redistribute static with a route-map

There are many solutions




























